import net.minecraftforge.gradle.user.TaskSourceCopy

// For those who want the bleeding edge
buildscript {
    ext.kotlin_version = '1.0.1-2'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.matthewprenger:CurseGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.matthewprenger.cursegradle'

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

ext.config = parseConfig(file('build.properties'))
if (file('private.properties').exists())
    ext.priv = parseConfig(file('private.properties'))

version = "${config.mc_version}-${config.mod_version}"
group = 'de.mineformers.vimmersion'
archivesBaseName = 'vanilla-immersion'

minecraft {
    version = "${config.mc_version}-${config.forge_version}${config.forge_branch != '' ? '-' : ''}${config.forge_branch}"
    runDir = 'run'
    mappings = config.mappings

    replace '@VERSION@', config.mod_version
    replace 'acceptedMinecraftVersions = "*",', """acceptedMinecraftVersions = "[${config.mc_version}]","""
    replace 'required-after:Forge', "required-after:Forge@[${config.forge_version},)"
    if (file('private.properties').exists())
        replace '@UPDATE_URL@', priv.update_url

    replaceIn 'VanillaImmersion.kt'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

shadowJar {
    relocate 'kotlin', 'de.mineformers.vanillaimmersion.kotlin'
    relocate 'org.jetbrains.annotations', 'de.mineformers.vanillaimmersion.jetbrains.annotations'
    classifier ''
}

reobf {
    shadowJar { mappingType = 'SEARGE' }
}
tasks.build.dependsOn reobfShadowJar

// Mad hacks to make source replacements work for Kotlin
import net.minecraftforge.gradle.user.TaskSourceCopy
for (set in sourceSets) {
    def taskName = "source${set.name.capitalize()}Kotlin"
    def dir = new File(project.getBuildDir(), "sources/${set.name}/kotlin")
    task(taskName, type: TaskSourceCopy) {
        source = set.getKotlin()
        output = dir
    }
    def compileTask = tasks[set.getCompileTaskName("kotlin")]
    compileTask.dependsOn taskName
    compileTask.source = dir
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', config.mod_version
    inputs.property 'mcversion', config.mc_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        if (file('private.properties').exists()) {
            // replace version, mcversion and updateUrl
            expand 'version': project.version, 'mcversion': project.minecraft.version, 'updateUrl': priv.update_url
        } else {
            // replace version and mcversion
            expand 'version': project.version, 'mcversion': project.minecraft.version
        }
    }

    // copy everything else other than the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

curseforge {
    apiKey = priv.cf_api
    project {
        id = priv.cf_project
        changelog = """See <a title="GitHub Changelog" href="https://github.com/PaleoCrafter/VanillaImmersion/releases/tag/v${version}">GitHub</a>"""
        releaseType = priv.cf_type
        addGameVersion config.mc_version

        mainArtifact(shadowJar) {
            displayName = "Vanilla Immersion - ${config.mod_version}"
        }
    }
}

afterEvaluate {
    curseforge.curseProjects.each { tasks["curseforge${it.id}"].dependsOn reobfShadowJar }
}